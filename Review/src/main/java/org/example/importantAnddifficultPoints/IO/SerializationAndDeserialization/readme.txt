1、对象序列化
序列化：将对象写入到IO流中，说的简单一点就是将内存模型的对象变成字节数字，可以进行存储和传输。
反序列化：从IO流中恢复对象，将存储在磁盘或者从网络接收的数据恢复成对象模型。
使用场景：所有可在网络上传输的对象都必须是可序列化的，否则会出错；所有需要保存到磁盘的Java对象都必须是可序列化的。
该对象必须实现Serializable接口，才能被序列化。

2、序列化版本号
我们知道，反序列化必须拥有class文件，但随着项目的升级，class文件也会升级，序列化怎么保证升级前后的兼容性呢？
Java序列化提供了一个 private static final long serialVersionUID 的序列化版本号，只要版本号相同，即使更改了序列化属性，对象也可以正确被反序列化回来。

3、总结
所有需要网络传输的对象都需要实现序列化接口。
对象的类名、实例变量（包括基本类型，数组，对其他对象的引用）都会被序列化；方法、类变量、transient实例变量都不会被序列化。
如果想让某个变量不被序列化，可以使用 transient 修饰。
序列化对象的引用类型成员变量，也必须是可序列化的，否则，会报错。
反序列化时必须有序列化对象的class文件。
同一对象序列化多次，只有第一次序列化为二进制流，以后都只是保存序列化编号，不会重复序列化。
建议所有可序列化的类加上serialVersionUID 版本号，方便项目升级。
Intellij idea用快捷键自动生成序列化id，类继承了Serializable接口之后，使用alt+enter快捷键自动创建序列化id
方法：进入setting→inspections→serialization issues→选择图中的选项。serializable class without ‘serialVersionUID’