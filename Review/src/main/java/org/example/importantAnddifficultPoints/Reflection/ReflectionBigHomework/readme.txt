这个作业可以更好的理解注解和反射的作用
注解是要被反射获取才能发挥作用的

实现了这样一个东西：
如果一个类被 @Singleton 注解修饰了，那么反射会捕获到这个注解，并构造一个该类的【单例】实例对象，并放到一个容器中
这样以后所有的类就不用再去new了，都是通过容器直接获得想要的、已经生成好了的类

好处：
1、统一管理，不凌乱。
2、虽然类在启动的时候生成会降低启动速度，但是不用在运行过程中生成类，这样就能降低运行时的资源消耗，保证稳定性。

怎么做：
1、首先通过全限定名称把所有的类遍历一遍
2、如果该类有 @Singleton 注解修饰，那就用反射的方法生成单例实例对象